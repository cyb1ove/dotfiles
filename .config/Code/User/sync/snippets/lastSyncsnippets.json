{"ref":"ab7719d1-11b0-4510-86bb-26b3246a8aae","syncData":{"version":1,"machineId":"c0ba37dd-2b70-4d87-ae9e-dd484111a294","content":"{\"ssh_config.json\":\"{\\n\\t// Place your snippets for ssh_config here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"rc.code-snippets\":\"{\\n\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"snippets.code-snippets\":\"{\\n\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"React Functioncal Component\\\": {\\n\\t\\t\\\"scope\\\": \\\"typescriptreact\\\",\\n\\t\\t\\\"prefix\\\": \\\"fc\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"import { clsx } from 'clsx';\\\",\\n\\t\\t\\t\\\"import { FC } from 'react';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"import classes from './${TM_FILENAME_BASE}.module.scss';\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"interface ${TM_FILENAME_BASE}Props {\\\",\\n\\t\\t\\t\\\"  className?: string;\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"export const ${TM_FILENAME_BASE}: FC<${TM_FILENAME_BASE}Props> = ({ className }) => {\\\",\\n\\t\\t\\t\\\"  return (\\\",\\n\\t\\t\\t\\\"    <div className={clsx(classes.${TM_FILENAME_BASE:/downcase}, className)}>\\\",\\n\\t\\t\\t\\\"      ${1}\\\",\\n\\t\\t\\t\\\"    </div>\\\",\\n\\t\\t\\t\\\"  )\\\",\\n\\t\\t\\t\\\"};\\\"\\n\\t\\t]\\n\\t}\\n}\\n\"}"}}